name: Create Release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Update version in version.py
      shell: pwsh
      run: |
        # Remove 'v' prefix from tag to get version number
        $VERSION = "${{ github.ref_name }}".TrimStart('v')
        # Update version.py using PowerShell
        $content = Get-Content -Path "src/utils/version.py" -Raw
        $content = $content -replace "__version__ = '.*'", "__version__ = '$VERSION'"
        Set-Content -Path "src/utils/version.py" -Value $content
        Write-Host "Updated version to $VERSION in version.py"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Install Inno Setup
      run: |
        choco install innosetup --yes --force
    
    - name: Build executable
      run: |
        python build.py
    
    - name: Debug - List Output Directory
      shell: pwsh
      run: |
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Output directory contents:"
        Get-ChildItem -Path "Output" -Recurse | ForEach-Object { Write-Host $_.FullName }
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      shell: pwsh
      run: |
        # Find the installer file in the Output directory
        $installer = Get-ChildItem -Path "Output" -Filter "DailyRegister_Setup_${{ github.ref_name }}.exe" | Select-Object -First 1
        
        if ($installer) {
          Write-Host "Found installer at: $($installer.FullName)"
          
          # Create the upload URL
          $uploadUrl = "${{ steps.create_release.outputs.upload_url }}"
          $uploadUrl = $uploadUrl -replace '\{.*\}', "?name=DailyRegister_Setup_${{ github.ref_name }}.exe"
          
          # Upload the file
          $headers = @{
            "Authorization" = "token ${{ secrets.RELEASE_TOKEN }}"
            "Content-Type" = "application/x-msdownload"
          }
          
          $response = Invoke-RestMethod -Uri $uploadUrl -Method Post -Headers $headers -InFile $installer.FullName
          Write-Host "Upload successful!"
        } else {
          Write-Host "Installer not found! Searching in Output directory:"
          Get-ChildItem -Path "Output" -Recurse -File | ForEach-Object { Write-Host $_.FullName }
          exit 1
        } 